#!/bin/sh -e

. /lib/lsb/init-functions

OPENBATON_BASE=/usr
OPENBATON_PLUGINS_FOLDER=${OPENBATON_BASE}/lib/openbaton/plugins
OPENBATON_EXE_FOLDER=${OPENBATON_BASE}/bin

OPENBATON_PLUGINS_TEST_URL="http://get.openbaton.org/plugins/stable/test-plugin-0.5-SNAPSHOT.jar"
OPENBATON_PLUGINS_OPENSTACK_URL="http://get.openbaton.org/plugins/1.0.2-liberty/openstack-plugin-1.0.2-liberty.jar"
TMPFOLDER=$(mktemp -d)

USER="$(id -un 2>/dev/null || true)"

checkBinary () {
    if command -v $1 >/dev/null 2>&1 ; then
        log_success_msg "Checking for '$1'"
        return 0
    else
        log_failure_msg "Checking for '$1'"
        return 1
    fi
}

_ex='sh -c'
if [ "${USER}" != 'root' ]; then
    if checkBinary sudo; then
        _ex='sudo -E sh -c'
    elif checkBinary su; then
        _ex='su -c'
    fi
fi

ulimit -S -n 4096


# Set the installation mode (interactive or not interactive)
INTERACTIVE=true
RESULT=$(env | grep DEBIAN_FRONTEND=noninteractive | wc -l)
if [ ${RESULT} -ne 0 ]; then
    INTERACTIVE=false
fi


##################
#### RabbitMQ ####
##################

configureRabbitMQ () {
    # Allow the use of the .deb package to install Open Baton with Docker (because of issues when installing and configuring RabbitMQ during a docker image build) 
    # See documentation for more info
    if [ "${RABBITMQ_ALREADYCONFIGURED}" != "true" ]; then
        # TODO: check rabbitmq-server is started
        result=$($_ex 'rabbitmqctl list_users' | grep '^admin' | wc -l)
    	if [ ${result} -eq 0 ]; then
            $_ex 'rabbitmqctl add_user admin openbaton'
            $_ex 'rabbitmqctl set_user_tags admin administrator'
            $_ex 'rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"'
        fi
        #### Workaround to enable rabbitmq management plugin ####
        #$_ex 'rabbitmq-plugins enable rabbitmq_management'
	    if [ -f /etc/rabbitmq/enabled_plugins ]; then
            result=$(grep /etc/rabbitmq/enabled_plugins -e "[rabbitmq_management].")
    	    if [ "${result}" != "[rabbitmq_management]." ]; then
                $_ex 'echo "[rabbitmq_management]." >> /etc/rabbitmq/enabled_plugins'
    	    fi
        else
	        $_ex 'echo "[rabbitmq_management]." > /etc/rabbitmq/enabled_plugins'
        fi
        ##########################################################
        $_ex 'service rabbitmq-server restart'
        if [ "$?" != "0" ]; then
            log_failure_msg "rabbitmq is not running properly (check the problem in /var/log/rabbitmq)"
            exit 1
        fi
    fi    

    # Allow the use of the .deb package to install Open Baton with Docker (letting skip the interactive installation during the docker image build) 
    # Generally setting the environment variable "DEBIAN_FRONTEND=noninteractive" enables the user to install Open Baton in a 'non interactive' mode 
    # (all the default value will be used and both the 'test' and 'openstack' VIM Driver Plugins will be downloaded)
    if [ "${INTERACTIVE}" = "true" ]; then
    	read -p "Enter the rabbitmq broker ip [localhost]: " brokerIp
    	export brokerIp=${brokerIp}
    	if [ "${brokerIp}" != "" ]; then
            log_success_msg "Setting new broker ip: ${brokerIp}"
	        $_ex 'sed -i "s/nfvo.rabbit.brokerIp = localhost/nfvo.rabbit.brokerIp = $brokerIp/g" /etc/openbaton/openbaton.properties'
        fi

    	read -p "Enter the rabbitmq management port [15672]: " managementPort
    	export managementPort=${managementPort}
    	if [ "${managementPort}" != "" ]; then
            log_success_msg "Setting new management port: ${managementPort}"
	        $_ex 'sed -i "s/nfvo.rabbit.management.port = 15672/nfvo.rabbit.management.port = $managementPort/g" /etc/openbaton/openbaton.properties'
    	fi
    fi
}


##################
#### Security ####
##################

configureSecurity () {
    # Allow the use of the .deb package to install Open Baton with Docker (letting skip the interactive installation during the docker image build) 
    # Generally setting the environment variable "DEBIAN_FRONTEND=noninteractive" enables the user to install Open Baton in a 'non interactive' mode 
    # (all the default value will be used and both the 'test' and 'openstack' VIM Driver Plugins will be downloaded)
    if [ "${INTERACTIVE}" = "true" ]; then
        read -p "Do you want to enable HTTPS? [N/y]: " https
    	export https=${https}
    	if [ "${https}" != "" ]; then
	        if [ "${https}" = "y" -o "${https}" = "Y" -o "${https}" = "yes" ]; then
            	log_success_msg "Enabling HTTPS"
       	    	# server.https = false
       	    	$_ex 'sed -i "s/# server.https = false/server.https = true/g" /etc/openbaton/openbaton.properties'
            	# server.port = 8443       
       	    	$_ex 'sed -i "s/# server.port = 8443/server.port = 8443/g" /etc/openbaton/openbaton.properties'
            	# server.ssl.key-store = /etc/openbaton/keystore.p12
       	    	$_ex 'sed -i -e "s@# server.ssl.key-store = \/etc\/openbaton\/keystore.p12@server.ssl.key-store = \/etc\/openbaton\/keystore.p12@g" /etc/openbaton/openbaton.properties'
       	    	# server.ssl.key-store-password = password
	    	$_ex 'sed -i "s/# server.ssl.key-store-password = password/server.ssl.key-store-password = password/g" /etc/openbaton/openbaton.properties'
       	    	# server.ssl.keyStoreType = PKCS12
       	    	$_ex 'sed -i "s/# server.ssl.keyStoreType = PKCS12/server.ssl.keyStoreType = PKCS12/g" /etc/openbaton/openbaton.properties'
       	    	# server.ssl.keyAlias = tomcat
       	    	$_ex 'sed -i "s/# server.ssl.keyAlias = tomcat/server.ssl.keyAlias = tomcat/g" /etc/openbaton/openbaton.properties'
     	    fi
    	fi
    fi
}


###############
#### MySQL ####
###############

configureMySQL () {
    #if [ "${INTERACTIVE}" = "true" ]; then
    if [ "${OPENBATON_ENABLED_PERSISTENCE}" = "true" ]; then
        log_success_msg "Configuring MySQL for Open Baton .."
            $_ex 'sed -i "s/spring.datasource.url=jdbc:hsqldb:file:\/tmp\/openbaton\/openbaton.hsdb/# spring.datasource.url=jdbc:hsqldb:file:\/tmp\/openbaton\/openbaton.hsdb/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver/# spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/spring.jpa.database-platform=org.hibernate.dialect.HSQLDialect/# spring.jpa.database-platform=org.hibernate.dialect.HSQLDialect/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/spring.jpa.hibernate.ddl-auto=create-drop/# spring.jpa.hibernate.ddl-auto=create-drop/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/# spring.jpa.hibernate.ddl-auto=update/spring.jpa.hibernate.ddl-auto=update/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/# spring.datasource.validationQuery=SELECT 1/spring.datasource.validationQuery=SELECT 1/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/# spring.datasource.testOnBorrow=true/spring.datasource.testOnBorrow=true/g" /etc/openbaton/openbaton.properties'
            # Enable MySQL
            $_ex 'sed -i "s/# spring.datasource.url=jdbc:mysql:\/\/localhost:3306\/openbaton/spring.datasource.url=jdbc:mysql:\/\/localhost:3306\/openbaton/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/# spring.datasource.driver-class-name=com.mysql.jdbc.Driver/spring.datasource.driver-class-name=com.mysql.jdbc.Driver/g" /etc/openbaton/openbaton.properties'
            $_ex 'sed -i "s/# spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect/spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect/g" /etc/openbaton/openbaton.properties'
            read -p "Please, type the name of the mysql user you would like Openbaton to use [admin]: " sqluser
            export dbuser=admin
            export dbpassword=changeme
            if [ "${sqluser}" != "" ]; then
                dbuser=${sqluser}
                $_ex 'sed -i "s/spring.datasource.username=admin/spring.datasource.username=${dbuser}/g" /etc/openbaton/openbaton.properties'
            fi
            # Turning echo on and off between password reading
            stty -echo
            read -p "Please, provide the password for this user [changeme]: " sqlpassword ; echo
            stty echo
            if [ "${sqlpassword}" != "" ]; then
                dbpassword=${sqlpassword}
                $_ex 'sed -i "s/spring.datasource.password=changeme/spring.datasource.password=${dbpassword}/g" /etc/openbaton/openbaton.properties'
            fi
            # Turning echo on and off between password reading
            stty -echo
            read -p "Please, provide the password of the root user of mysql: " rootpasswd ; echo
            stty echo
            if [ "${rootpasswd}" = "" ]; then
                rootpasswd=changeme
            fi
            # Create the Database
            mysql -uroot -p${rootpasswd} -e "CREATE DATABASE openbaton /*\!40100 DEFAULT CHARACTER SET utf8 */;"
            mysql -uroot -p${rootpasswd} -e "CREATE USER ${dbuser}@localhost IDENTIFIED BY '${dbpassword}';"
            mysql -uroot -p${rootpasswd} -e "GRANT ALL ON openbaton.* TO '${dbuser}'@'localhost';"
            mysql -uroot -p${rootpasswd} -e "FLUSH PRIVILEGES;"
            mysql -uroot -p${rootpasswd} -e "USE openbaton;" 
    fi
    #fi
}


#############################
#### VIM-Drivers Plugins ####
#############################

pluginsPrereq () {
    log_success_msg "Configuring the Plugins environment .."
    mkdir -p ${OPENBATON_PLUGINS_FOLDER}
    export OPENBATON_PLUGINS_FOLDER="${OPENBATON_PLUGINS_FOLDER}"
    $_ex 'sed -i "s~nfvo.plugin.installation-dir = ./plugins~nfvo.plugin.installation-dir = "${OPENBATON_PLUGINS_FOLDER}"~" /etc/openbaton/openbaton.properties'
}

getTestVIMPlugin () {
    log_success_msg "Getting Test VIM Plugin .."
    wget -nH --cut-dirs 2 -r --no-parent  --reject "index.html*" "${OPENBATON_PLUGINS_TEST_URL}" -P "${TMPFOLDER}"
}

getOpenStackVIMPlugin () {
    log_success_msg "Getting OpenStack VIM Plugin .."
    wget -nH --cut-dirs 2 -r --no-parent  --reject "index.html*" "${OPENBATON_PLUGINS_OPENSTACK_URL}" -P "${TMPFOLDER}"
}

getAllVIMPlugins () {
    getTestVIMPlugin
    getOpenStackVIMPlugin
}

downloadVIMDriverPlugins () {
    pluginsPrereq
    # Allow the use of the .deb package to install Open Baton with Docker (letting skip the interactive installation during the docker image build) 
    # Generally setting the environment variable "DEBIAN_FRONTEND=noninteractive" enables the user to install Open Baton in a 'non interactive' mode 
    # (all the default value will be used and both the 'test' and 'openstack' VIM Driver Plugins will be downloaded)
    if [ "${INTERACTIVE}" = "true" ]; then
    	read -p "Do you want to download the VIM-Driver Plugins? [Y/n]: " yn
    	if [ "${yn}" != "n" -a "${yn}" != "N" ]; then
            echo "Options available are: "
	        echo "Options available are: "
            echo "    0. Download ALL VIM-Driver Plugins listed below"
            echo "    1. Download 'Test' VIM-Driver Plugin"
            echo "    2. Download 'OpenStack' VIM-Driver Plugin"
            read -p "Insert the number(s) of the plugin(s) you want to download (in case of multiple plugins insert the numbers separated by a space - i.e. 1 2) [0]: " plugins
	        if [ "${plugins}" = "" ]; then
            	getAllVIMPlugins
            else
            	set -- ${plugins} # Create the array for the cycle for
                for plug in ${@}
                do
                    case ${plug} in
                    	1 ) getTestVIMPlugin ;;
                    	2 ) getOpenStackVIMPlugin ;;
                    	* ) getAllVIMPlugins ;;
                    esac
            	done
            fi
	        export OPENBATON_PLUGINS_FOLDER="${OPENBATON_PLUGINS_FOLDER}"
            export TMPFOLDER="${TMPFOLDER}"
            $_ex 'cp ${TMPFOLDER}/* "${OPENBATON_PLUGINS_FOLDER}"'
        fi
    else
	    getAllVIMPlugins
        export OPENBATON_PLUGINS_FOLDER="${OPENBATON_PLUGINS_FOLDER}"
        export TMPFOLDER="${TMPFOLDER}"
        ${_ex} 'cp ${TMPFOLDER}/* "${OPENBATON_PLUGINS_FOLDER}"'
    fi
}


################################################
#### Configure Open Baton NFVO installation ####
################################################

setPassword () {
    #if [ "${INTERACTIVE}" = "true" ]; then
    # Turning echo on and off between password reading
    stty -echo
    read -p "Provide the new password for admin user of Open Baton: " openbatonpswd ; echo
    stty echo
    if [ "${openbatonpswd}" != "" ]; then
        export openbatonpswd=${openbatonpswd}
        stty -echo
        read -p "Repeat the password: " openbatonpswd2 ; echo
        stty echo
        export openbatonpswd2=${openbatonpswd2}
        if [ "${openbatonpswd}" = "${openbatonpswd2}" ]; then
            $_ex 'sed -i "s/# nfvo.security.admin.password\ =\ openbaton/nfvo.security.admin.password\ =\ $openbatonpswd/g" /etc/openbaton/openbaton.properties'
            return
        fi
    else
        setPassword
    fi
    #fi
}

configure () {
    log_success_msg "Configuring Open Baton NFVO installation .."
    configureRabbitMQ
    configureSecurity
    configureMySQL
    downloadVIMDriverPlugins

    log_success_msg "Giving openbaton-nfvo execution permissions .."
    $_ex "chmod a+x ${OPENBATON_EXE_FOLDER}/openbaton-nfvo"

    setPassword
    
    log_success_msg "Open Baton NFVO installation completed"

    # Allow the use of the .deb package to install Open Baton with Docker (the Docker file developer need to manage the starting of the NFVO in the Docker file) 
    if [ "${OPENBATON_DOCKERIZED}" != "true" ]; then
        if $_ex 'systemctl start openbaton-nfvo.service' >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton NFVO .."
        elif $_ex 'start openbaton-nfvo' >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton NFVO .."
        else 
            log_failure_msg "Starting the Open Baton NFVO"
        fi
    fi
}


configure
